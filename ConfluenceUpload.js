// requires
const fs = require("fs");
const path = require("path");
var Confluence = require("confluence-api");
var prompt = require("prompt");
// This json object is used to configure what data will be retrieved from command line.
var prompt_attributes = [
  {
    // The fist input text is assigned to username variable.
    name: "username"
  },
  {
    // The second input text is assigned to password variable.
    name: "password",
    // Do not show password!
    hidden: true
  },
  {
    // Third input is assigned to target URL
    name: "URL"
  },
  {
    // Final input is for the target space on confluence.
    name: "space"
  }
];

/**
 *
 * CUSTOM FIELDS: MODIFY AS NEEDED
 * User, pass, url, and space are entered in console durring execution.
 *
 */
var destSpace = "ENTER CONFLUENCE SPACE";
var config = {
  username: "ENTER CONFLUENCE USERNAME",
  /**
   * NOTE: When testing on confluence CLOUD, need to use their API tokens!
   * https://confluence.atlassian.com/cloud/api-tokens-938839638.html?_ga=2.38207075.1576466611.1570555903-1500217454.1559059279
   */
  password: "ENTER CONFLUENCE PASSWORD OR API KEY",
  baseUrl: "ENTER CONFLUENCE URL"
};
// By default, the files downloaded from confluence are put into the source directory in the project folder.
const sourceDir = "\\source";

// global constants
const confluence = new Confluence(config);
const directoriesToSkip = [
  "bower_components",
  "node_modules",
  "www",
  "platforms"
];

/**
 *
 * Starts the process.
 *
 */
main();

async function main() {
  await promptValues()
    .then(res => console.log(res))
    .catch(err => console.log(err));

  readDir(sourceDir);
}

/**
 * Uses confluence api to fetch a target page's ID.
 * @param {*} space Name of confluence space the page is stored in.
 * @param {*} name Name(title) of page we want the ID of.
 * @returns ID as promise<string>
 */
async function getID(space, name) {
  // promise wrapper for getContentByPageTitle
  const getPagePromise = (s, n) =>
    new Promise((resolve, reject) => {
      confluence.getContentByPageTitle(s, n, function(err, data) {
        if (err) {
          reject(err);
        } else {
          console.log(`Fetching page ID for ${name}`);
          resolve(data.results[0].id);
        }
      });
    });
  return await getPagePromise(space, name);
}

/**
 * Builds a page on the target space/parent with the proivded name and body.
 * @param {*} targetSpace
 * @param {*} name
 * @param {*} body optional, html as string
 * @param {*} parentID optional, ID for the parent page.
 */
async function buildPage(
  targetSpace,
  name,
  body = "<div>Generated by ConfluenceUpload</div>",
  parentID
) {
  const buildPagePromise = (s, n, b, p) =>
    new Promise((resolve, reject) => {
      confluence.postContent(s, n, b, p, function(err, data) {
        if (err) {
          reject(err);
        } else {
          console.log("Building the page now...");
          resolve(data);
        }
      });
    });
  return await buildPagePromise(targetSpace, name, body, parentID);
}

/**
 * Attaches the local file found at source to the target page
 * @param {*} targetSpace
 * @param {*} targetID
 * @param {*} source path to file as string.
 */
function attachContent(targetSpace, targetID, source) {
  console.log(`Attempting attachment to ${targetSpace}/${targetID}: ${source}`);

  confluence.createAttachment(targetSpace, targetID, source, function(
    err,
    res
  ) {
    if (err) {
      console.log("FAILED TO ATTACH!");
      //console.log(err);
    } else {
      console.log(`Posted successfully!\n${res}`);
      //console.log(res);
    }
  });
}

/**
 * Main function, processes all of the files/folders in a directory and uploads to confluence.
 * @param {*} directory
 */
async function readDir(directory) {
  var currentDirectorypath = path.join(__dirname + directory);

  // The parent document (where files will be attached) has the same name as
  // the folder the files are found in.
  var parent = null;
  if (directory !== sourceDir) {
    // If not the initial value (not first run)
    parent = "" + directory;
    parent = parent.substr(parent.lastIndexOf("\\") + 1, parent.length);
  }

  var currentDirectory = fs.readdirSync(currentDirectorypath, "utf8");
  console.log(currentDirectory);

  // TODO: Make the foreach async
  // Maybe done with a simple for of loop?

  // for of is async friendly.
  for (let file of currentDirectory) {
    var fileShouldBeSkipped = directoriesToSkip.indexOf(file) > -1;
    var pathOfCurrentItem = path.join(__dirname + directory + "/" + file);
    if (!fileShouldBeSkipped && fs.statSync(pathOfCurrentItem).isFile()) {
      console.log(pathOfCurrentItem);

      await getID(destSpace, parent)
        .then(result => attachContent(destSpace, result, pathOfCurrentItem))
        .catch(error => console.log("failed at attachContent: " + error));

      console.log(`Attaching ${file} to ${parent}`);
    }
    // If neither a file to be skipped, or a file, then we're looking at a folder.
    // Either create a new page attached to the space, or to the parent directory
    // if we're not in the "root" directory.
    else if (!fileShouldBeSkipped) {
      var directorypath = path.join(directory + "\\" + file);
      if (parent) {
        console.log(`CREATING CHILD PAGE: ${file}`);
        var parentID = await getID(destSpace, parent);
        await buildPage(
          destSpace,
          file,
          `<div>Child of ${parent}</div>`,
          parentID
        );
        readDir(directorypath);
      } else {
        console.log(`CREATING NEW PAGE: ${file}`);
        await buildPage(destSpace, file);
        readDir(directorypath);
      }
    }
  }
}

/**
 * prompts user for their username, password, confluence url, and target space for the uploads.
 */
async function promptValues() {
  // Start the prompt to read user input.
  prompt.start();

  const asyncPrompt = attributes =>
    new Promise((resolve, reject) => {
      // Prompt and get user input then display those data in console.
      prompt.get(attributes, function(err, result) {
        if (err) {
          console.log(err);
          reject("Failed.");
        } else {
          console.log("Command-line received data:");

          // Get user input from result object.
          config.username = result.username;
          config.password = result.password;
          config.baseUrl = result.URL;
          destSpace = result.space;
          var message =
            " Attempting upload with Username : " +
            config.username +
            "\nTo confluence at: " +
            config.baseUrl +
            " ... " +
            destSpace;

          // Display user input in console log.
          resolve(message);
        }
      });
    });

  return await asyncPrompt(prompt_attributes);
}
